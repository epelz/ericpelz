{"data":{"site":{"siteMetadata":{"title":"Eric Pelz","author":"Eric Pelz"}},"markdownRemark":{"id":"7dc13c42-58bc-58c5-807c-9ee4e8740c73","excerpt":"Patterns learned from porting the Asana application to React When using React to build large-scale applications, a number of frameworks have\nflourished to…","html":"<h2>Patterns learned from porting the Asana application to React</h2>\n<p>When using React to build large-scale applications, a number of frameworks have\nflourished to easily manage state, data-fetching, routing, and other\napplication-level concerns. We’re not going to talk about that — instead, we’ll\nfocus on another essential piece: how do you design React components for use in\na large application and have it scale?</p>\n<hr>\n<p>A goal to strive for when using any framework or language is\n<a href=\"https://www.youtube.com/watch?v=rI8tNMsozo0\">simplicity</a>. Over time, it is the\nsimpler application that is more maintainable, readable, testable, and\nperformant. React is no exception, and we found that one of the best ways to\nmanifest simplicity is by striving for\n<a href=\"https://wiki.haskell.org/Functional_programming#Purity\">functional purity</a> in\ncomponents, and by developing patterns that achieve this purity by default.\nPurity leads to more isolated and inherently simpler components, thereby\nbringing about a less braided and simpler system.</p>\n<p>This is something we’ve thought a lot about at Asana — before we started using\nReact, we had been building our in-house functionally reactive framework, Luna,\nsince 2008. In iterating on this framework and building our web application,\nwe’ve learned what worked and what caused long-term problems\n(<a href=\"https://blog.asana.com/2015/05/the-evolution-of-asanas-luna-framework/\">read more</a>).\nThrough that, we’ve developed a series of overarching design principles that can\nbe applied everywhere, but particularly in React.</p>\n<h3>Immutable data representation</h3>\n<p>When your data representation is mutable, then you’ll find it very difficult to\nmaintain simple components. Individual components will become more complex by\ndetecting and handling the transition states when data changes, rather than\nhandling this at a higher-level component\n<a href=\"https://medium.com/@learnreact/container-components-c0e67432e005#\">dedicated</a>\nto re-fetching the data. Additionally, in React, immutable structures often lead\nto better performance: when data changes in a mutable representation, you’ll\nlikely need to rely on React’s virtual DOM to determine whether components\nshould update; alternatively, in an immutable representation, you can use a\nbasic strict equality check to determine whether an update should occur.</p>\n<p>Any time we have deviated from this and used a mutable object in props, it has\nresulted in regret and refactoring.</p>\n<p>See <a href=\"http://jlongster.com/Using-Immutable-Data-Structures-in-JavaScript\">here</a>\nfor more general benefits of using immutable data structures.</p>\n<h3>Make liberal use of pure functions</h3>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a> is a function\nwhose return value is solely determined by its input values, without dependence\non global state or causing any side effects. In components, we often have\ncomplicated behavior that aids but is not directly tied to our rendering. Use\npure helper functions to movethis logic outside of the component, so that the\ncomponent has fewer responsibilities and lower complexity. Additionally, this\nlogic can be tested in an isolated way, and is re-usable in other components. If\nyou notice common sets of these helper functions, then denote them as such by\norganizing them into sets of modules.</p>\n<p>We’ve encountered two main classes of these which occur in almost all of our\ncomponents:</p>\n<ol>\n<li>Data model helpers to derive a result from one or more objects<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></li>\n<li>Mutation helpers to perform client- and server-side mutations in response to\nuser actions<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></li>\n</ol>\n<!-- prettier-ignore-start -->\n<!-- prettier-ignore-end-->\n<h3>Use pure components, avoiding impure pitfalls</h3>\n<p>A pure component is a React component whose render function is pure (solely\ndetermined by props and state). The default behavior in React is to always\nre-render the entire component tree, even if props/state do not change. This is\nincredibly inefficient, and React\n<a href=\"https://facebook.github.io/react/docs/pure-render-mixin.html\">suggests</a>\noverriding shouldComponentUpdate to take advantage of pure render functions in\nthe component’s lifecycle. This offers an enormous performance boost and\nincreased simplicity, so you should consider doing this early-on.</p>\n<p>When using pure components (overriding shouldComponentUpdate), there is no\nverification that you actually implement your components to be pure. So, it’s\npossible to accidentally write a component that is not pure, which will cause\nreactivity problems and show stale data to the user. We’ll discuss two of these\n“impure pitfalls.”</p>\n<h4>Globals</h4>\n<p>Using globals in a component means that the component is no longer pure, as it\ndepends on data outside of props and state. If you rely on a global for\nrendering or in any of the component’s lifecycle methods, then you won’t achieve\ncorrectness and reactivity. We’ve found it immensely helpful to avoid using\nglobals like the Document or Window, and instead pass these as props to the\ncomponents which use them. We do this by creating a Services object, and by\nhaving each component declare in an interface which services it relies on.\nThrough this, components can maintain purity and be independent of the global\nnamespace.</p>\n<h4>Render Callbacks</h4>\n<p>A now-antipattern that used to be quite prevalent for us is a <em>render callback:</em>\na function passed as a prop to a component, which allows that component to\nrender something. A common use-case of a render callback was to allow a child to\nrender something using data it did not receive in props. For example, if we\nwanted to have a generalized component that could render many types of child\ncomponents, we would pass the component a callback to render the child.</p>\n<p>Unfortunately, render callbacks are inherently impure because they can use\nwhatever variables its function has closed on. So, because of our assumption of\npure components, if any of the outside environment changes then our component\nwould <em>not</em> re-render.</p>\n<p>Let’s see this in a code snippet.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Render callback anti-pattern</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ParentProps</span> <span class=\"token punctuation\">{</span>\n  someObject<span class=\"token punctuation\">:</span> SomeObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>ParentProps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>ChildComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      renderSomething<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_renderSomethingForIdx<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">_renderSomethingForIdx</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>SomeOtherComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      object<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">,</span>\n      idx<span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChildProps</span> <span class=\"token punctuation\">{</span>\n  renderSomething<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactElement<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>ChildProps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... some other behavior ...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">renderSomething</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this snippet, ParentComponent passes a render callback to ChildComponent, and\nthat render callback uses someObject from props. Since ChildComponent uses this\nfunction for its rendering behavior, then it will <em>not</em> re-render if someObject\nchanges.</p>\n<p>Luckily, you can avoid using a render callback in one of three ways, depending\non your constraints, and each allows us to keep our pure component assumption.</p>\n<h5>Alternative 1</h5>\n<p>Pass all information needed for rendering to the child component, and have that\nchild render the component directly.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ParentProps</span> <span class=\"token punctuation\">{</span>\n  someObject<span class=\"token punctuation\">:</span> SomeObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>ParentProps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>ChildComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      someObject<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChildProps</span> <span class=\"token punctuation\">{</span>\n  idx<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  someObject<span class=\"token punctuation\">:</span> SomeObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>ChildProps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... some other behavior ...</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>SomeOtherComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      object<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">,</span>\n      idx<span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We achieve the same rendered output by having ChildComponent render\nSomeOtherComponent itself. This works well if the additional props do not cause\nexcess re-rendering, and do not break any contextual abstraction boundary in the\ncomponent.</p>\n<h5>Alternative 2</h5>\n<p>Render the component in its entirety and pass that to the child component</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ParentProps</span> <span class=\"token punctuation\">{</span>\n  someObject<span class=\"token punctuation\">:</span> SomeObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>ParentProps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>ChildComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      somethingElement<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_renderSomethingElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">_renderSomethingElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>SomeOtherComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      object<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">,</span>\n      idx<span class=\"token punctuation\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Suppose this had access to the idx</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChildProps</span> <span class=\"token punctuation\">{</span>\n  somethingElement<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactElement<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>ChildProps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... some other behavior ...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>somethingElement<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In cases that ParentComponent has all of the information needed to render\nSomeOtherComponent, we can just pass it down as a prop to the ChildComponent.</p>\n<h5>Alternative 3</h5>\n<p>Render the component partially, pass the ReactElement to the child component,\nand use React’s cloneElement to inject the remaining props.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ParentProps</span> <span class=\"token punctuation\">{</span>\n  someObject<span class=\"token punctuation\">:</span> SomeObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>ParentProps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>ChildComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      somethingElement<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_renderSomethingElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">_renderSomethingElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>SomeOtherComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      object<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">,</span>\n      idx<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// injected by ChildComponent</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChildProps</span> <span class=\"token punctuation\">{</span>\n  somethingElement<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactElement<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>ChildProps<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... some other behavior ...</span>\n\n    <span class=\"token comment\">// Clone the passed-in element, and add in the remaining prop.</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>somethingElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      idx<span class=\"token punctuation\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This alternative is great for cases where neither ParentComponent nor\nChildComponent have the full information needed to render SomeOtherComponent, so\nit shares the responsibility. While this may seem more complicated than the\nabove two alternatives, it has a lot of desirable properties. In the next\nsection, we’ll dig into a real world example to make it more concrete.</p>\n<h3>Divide components and use the injector pattern to maintain separation of concerns</h3>\n<p>Composition is an immensely useful pattern in React for achieving separation of\nconcerns. Many great philosophies around this have developed, such as dividing\ncomponents between\n<a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.yzeg1rmzv\">presentational and container components</a>.\nHowever, for some high-level components, such as a general component for\ndrag-and-drop, composition necessitated either use of a *render callback *or\nadded complexity. In such cases, we found the aforementioned <strong>injector\npattern</strong> helpful.</p>\n<hr>\n<p><strong>Example from Asana:</strong> Simplifying the Task List row</p>\n<p>A core component in Asana is the Task List, which allows a user to see all of\nthe tasks in a project. The component for a single row in this list has many\nresponsibilities: it displays information (such as the task assignee), it can be\na section or a task, and it can be dragged and dropped to re-order. Following\nthe principle of composition, we divided the task row to achieve smaller and\nsimpler components, and composed them together.</p>\n<p>As part of this, we wanted to create a general component that handled all of the\ndrag-and-drop logic, which could be composed with a task row. This would mean\nthat a task row could be completely agnostic to drag-and-drop, and all of that\nlogic would be contained within a new component that could be agnostic to its\nrendered child.</p>\n<p>With such a design, we would be able to compose a DraggableRowContainer and\nTaskRow to make a draggable task row. Each of these two components would not\nneed to know about the other, and a TaskList component could utilize them to\nrender its task list. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span><span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> DraggableRowContainer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        child<span class=\"token punctuation\">:</span> TaskRow<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          task<span class=\"token punctuation\">:</span> task\n          <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, we found this difficult to accomplish without introducing a *render\ncallback *or complicating the DOM hierarchy, because the DraggableRowContainer\nneeded to add to DOM nodes (in this case, adding class names). A solution could\nhave been to use a <em>render callback</em>, but that broke our purity assumption.</p>\n<p>Instead, we were able to use the injector pattern. DraggableRowContainer would\nclone its child (a TaskRow), and “inject” props to the child to enable\ndrag-and-drop. This did not introduce complexity to TaskRow: it could still\nrender purely based on props, and did not need to be conscious of drag\nfunctionality. The TaskRow props would just need to adhere to a certain\ninterface (in this case, expecting a class name to add styling on drag hover).\nTherefore, our task row has fewer responsibilities, we have a re-usable\nDraggableRowContainer component, and our DOM hierarchy is unchanged.</p>\n<hr>\n<p>The injection pattern has proved useful in our application, particularly when\nused to create general abstraction components (drag-and-drop, loading data, and\nso on). TypeScript gives us compile-time assurance that the passed-in element\ncan indeed be injected with a given property, and the cloned element can execute\nits React lifecycle methods without worry.</p>\n<h3>Conclusion</h3>\n<p>While this is just a short list of patterns to consider, and they will certainly\nnot guarantee a simple and scalable application, we have found them immensely\nhelpful in approaching component design. Incorporating functional purity in\nevery component — through use of immutable data representations, pure functions,\npure components, and eliminating impure pitfalls—has allowed us to develop large\nparts of our application in React while maintaining simplicity and performance.\nIn all, though, the best principle is to continue to take time to reflect along\nthe way and uncover new opportunities to simplify.</p>\n<hr>\n<p><em>Thanks to Kevin Der, Josh Smith, and Phips Peter for their great work in\ncontributing to these patterns.</em></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>  Example of a data model helper: determine whether a user is currently on\nvacation.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isOnVacation</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We pass in the current time, because otherwise this function would rely</span>\n  <span class=\"token comment\">// on the Date global. Instead, the calling component will use a chronometer</span>\n  <span class=\"token comment\">// service which is declaratively passed-in to it.</span>\n  nowTime<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// We take advantage of TypeScript's structural typing, so this method can</span>\n  <span class=\"token comment\">// take any compatible User model. This is preferable to relying on a specific</span>\n  <span class=\"token comment\">// User interface: each calling component has a subset of the User object graph</span>\n  <span class=\"token comment\">// that it depends on, so this makes isOnVacation usable in many components.</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">vacationStartTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">vacationEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> startTime <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">vacationStartTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> endTime <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">vacationEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> wasOnVacation <span class=\"token operator\">=</span> startTime <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> startTime <span class=\"token operator\">&lt;=</span> attr<span class=\"token punctuation\">.</span>nowTime<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> stillOnVacation <span class=\"token operator\">=</span> endTime <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> endTime <span class=\"token operator\">>=</span> attr<span class=\"token punctuation\">.</span>nowTime<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> wasOnVacation <span class=\"token operator\">&amp;&amp;</span> stillOnVacation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Example of a mutation helper: to “heart” a task</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">heartTask</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  datastore<span class=\"token punctuation\">:</span> DatastoreService<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Thin interfaces for the User/Task model which utilize TypeScript's</span>\n  <span class=\"token comment\">// structural typing, but the type aliases are omitted for brevity.</span>\n  user<span class=\"token punctuation\">:</span> UserBase<span class=\"token punctuation\">;</span>\n  task<span class=\"token punctuation\">:</span> TaskBase<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  attr<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span><span class=\"token function\">runInBatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. Optimistically create the object representing the heart.</span>\n    <span class=\"token keyword\">var</span> heartRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeartCreateRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      target<span class=\"token punctuation\">:</span> attr<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">dbObjectId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      user<span class=\"token punctuation\">:</span> attr<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">dbObjectId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> heartId <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span><span class=\"token function\">createDbObject</span><span class=\"token punctuation\">(</span>heartRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2. Send server request to update the database.</span>\n    attr<span class=\"token punctuation\">.</span>services<span class=\"token punctuation\">.</span>datastore<span class=\"token punctuation\">.</span><span class=\"token function\">requestServerChange</span><span class=\"token punctuation\">(</span>\n      “post”<span class=\"token punctuation\">,</span> “<span class=\"token operator\">/</span>task_heart”<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// server will create an identical object with the same ID.</span>\n        global_id<span class=\"token punctuation\">:</span> heartId<span class=\"token punctuation\">,</span>\n        task<span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">dbObjectId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        user<span class=\"token punctuation\">:</span> attr<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">dbObjectId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Designing Simpler React Components","date":"March 22, 2016","description":"Patterns learned from porting the Asana application to React"},"fields":{"readingTime":{"text":"12 min read"}}}},"pageContext":{"slug":"/designing-simpler-react-components/","previous":null,"next":{"fields":{"slug":"/propel-new-engineers-code-review/"},"frontmatter":{"title":"How to propel new engineers with code review"}}}}