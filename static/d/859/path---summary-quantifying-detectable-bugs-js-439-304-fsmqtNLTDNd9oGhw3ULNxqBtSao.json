{"data":{"site":{"siteMetadata":{"title":"Eric Pelz","author":"Eric Pelz"}},"markdownRemark":{"id":"8f315846-07a3-5c11-a85f-66026e0b21a2","excerpt":"“JavaScript is growing explosively and is now used in large mature projects even outside the web domain. JavaScript is also a dynamically typed language for…","html":"<p>“JavaScript is growing explosively and is now used in large mature projects even outside the web domain. JavaScript is also a dynamically typed language for which static type systems, notably Facebook’s Flow and Microsoft’s TypeScript, have been written. What benefits do these static type systems provide?”</p>\n<p>“In this study, we empirically quantify how much static type systems improve software quality. This is measured against bugs that are public, actually checked in and visible to other developers, potentially impacting them; public bugs notably include field bugs, which impact users. We consider public bugs because they are observable in software repository histories. Public bugs are more likely to be errors understanding the specification because they are usually tested and reviewed, and, in the case of field bugs, deployed. Thus, this experiment under-approximates static type systems’ positive impact on software quality, especially when one considers all their other potential benefits on documentation, program performance, code completion, and code navigation.”</p>\n<h2>Definition and methodology</h2>\n<p>” Definition 2.1 (ts-detectable): Given a static type system ts, a bug b is ts-detectable when adding or changing type annotations causes the program p containing b to error on a line changed by a fix and the new annotations are consistent with f , a fixed version of p.”</p>\n<p>The authors randomly selected 400 of the ~4 million closed issues of JavaScript projects on Github (sufficient to achieve 95% confidence level)</p>\n<p>They time-boxed annotating types for each bug to 10 minutes. This 10 minute number was determined from a preliminary study on 78 bugs sampled (where they found that 86.67% of bugs could be annotated or deemed not ts-detectable within 10 minutes)</p>\n<h2>Results</h2>\n<p>Results:</p>\n<ul>\n<li>They were able to label all 400 bugs as either detectable or undetected under Flow and TypeScript. Flow detected 60, and TypeScript detected 60. At the confidence level of 95%, this means the percentage of detectable bugs for both Flow and TypeScript fall into [11.5%, 18.5%] with mean 15%.</li>\n<li>Most of the bugs were easy to determine. Time-boxing to only 10 minutes per bug, they were able to determine all ut 18 of the 400 bugs. These remaining bugs took between 8 minutes to over a an hour of dedicated time (authors noted that some were quicker than the first iteration, due to increasing expertise).</li>\n</ul>\n<p>Caveat:</p>\n<p>Authors think this is a greatly understated impact of static typing, because:</p>\n<ul>\n<li>They only surveyed publicly visible bugs, which means any bug caught during development were not included. They also think public bugs are more often due to misunderstanding of the specification, which type systems cannot detect.</li>\n<li>This doesn’t include any other strengths of static type systems, like developer efficiency or app performance.</li>\n<li>This experiment uses relatively weak type systems of TypeScript and Flow.</li>\n<li>The authors have limited expertise in Flow and TypeScript, which means they could have incorrectly deemed bug as undetectable.</li>\n</ul>\n<p>Classifying ts-undetectable bugs</p>\n<ul>\n<li>Most errors were “specification errors” - 186/400 (55%). Errors implementing specification overwhelmingly constitute 78%. This demonstrates the importance of careful specification before development.</li>\n<li>StringError was the second most common error type - errors caused by incorrect content of a string (e.g. wrong URL).</li>\n<li>Authors theorize this is due to: (1) lots of URLs and other strings in JavaScript, (2) the string type being very opaque in most type systems.</li>\n</ul>\n<h3>TS vs Flow</h3>\n<ul>\n<li>TypeScript 2.0 added null handling. 22 of the 60 ts-detectable bugs needed null checks (i.e. they needed —strictNullChecks and TS 2.0, rather than TS 1.8).</li>\n<li>\n<p>TypeScript and Flow’s coverage were largely overlapping, with 6 exceptions: 3 were only Flow-detectable and 3 were only TypeScript detectable.</p>\n<ul>\n<li>All three Flow-detectable-only bugs were due to concatenating a possible undefined/null value with another string. For example, var x = ” ” + null + ” ”; This highlighted a TypeScript weakness (at least as of version 2.0).</li>\n<li>Two of the three TypeScript-detectable-only bugs were due to Flow’s incomplete support for using string literals as an index.</li>\n</ul>\n</li>\n</ul>\n<h2>Cost</h2>\n<ul>\n<li>\n<p>Directly measuring the effort programmers must spend to annotate programs with a static type system would be very hard. The authors instead approximate: token tax, “the number of tokens in the added type annotations”, and time tax, “the time spent adding annotations.”</p>\n<ul>\n<li>Token tax aims to proxy the number of decisions a programmer must make when adding type annotations. That is, for a ts-detectable bugs, the number of tokens in the annotation needed to trigger a type error. </li>\n</ul>\n</li>\n<li>These measures are a huge underestimate, because they only measure the “annotation tax” in a per-bug manner, where the authors have a very localized annotation effort determined only to target the bug in question (not the entire file). </li>\n<li>They lie under the assumption that the project has fully embraced using a static type checker, so the codebase would already be annotated prior to the bug being introduced. Thus, their metric measures just the time and tokens required for the <em>additional annotations</em> at the time of the bug-introducing change. In other words, it measures incrementally adding/annotating patches on an already annotated code base.</li>\n<li>\n<p>Using this measure, they find the mean per-bug annotation tax: For Flow there are 1.7 tokens and 231 seconds required to detect a bug, and 2.4 tokens and 306 seconds for TypeScript.</p>\n<ul>\n<li>Why discrepancy? Flow implements stronger type inference, and has a more compact syntax for nullable types. This was most dramatic in the time saved — Flow frequently could infer types and thus the authors did not even need to read the bug report and fix to add a consistent type annotation.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Quantifying Detectable Bugs in JavaScript","date":"March 24, 2018","description":"xcxc"},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{"slug":"/summary-quantifying-detectable-bugs-js/","previous":{"fields":{"slug":"/circumventing-engineering-complexity/"},"frontmatter":{"title":"Circumventing engineering complexity"}},"next":{"fields":{"slug":"/how-best-product-engineering-teams-max-value/"},"frontmatter":{"title":"How the best product engineering teams maximize value"}}}}